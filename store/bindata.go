/*
Sniperkit-Bot
- Date: 2018-08-12 11:57:50.86147846 +0200 CEST m=+0.186676333
- Status: analyzed
*/

// Code generated by go-bindata.
// sources:
// store/migrations/1533636853_initial.down.sql
// store/migrations/1533636853_initial.up.sql
// store/migrations/lock.json
// DO NOT EDIT!

package store

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1533636853_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x2d\xce\x88\x4f\x2d\x4b\xcd\x2b\x41\x15\x4f\xce\xcf\xcd\xc5\x10\x2c\x4a\x2d\xcb\x4c\x2d\x87\x2b\x77\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x67\xfb\x73\x7b\x57\x00\x00\x00")

func _1533636853_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1533636853_initialDownSql,
		"1533636853_initial.down.sql",
	)
}

func _1533636853_initialDownSql() (*asset, error) {
	bytes, err := _1533636853_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1533636853_initial.down.sql", size: 87, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1533636853_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x4d\x6e\xc2\x30\x10\x85\xd7\xf1\x29\x66\x09\x12\x37\x60\x05\xc8\xad\x50\x21\x54\x69\xba\x60\x15\x39\xf1\x10\xa6\x4a\xec\xc8\x1e\xd3\x9f\xd3\x57\x41\x6a\x15\x70\x2a\xda\x5d\xb7\xef\x7d\x51\xf4\xfc\xcd\x52\xde\xaf\xd3\xb9\x10\xab\x4c\x2e\x72\x09\xf9\x62\xb9\x91\xe0\xf0\x44\xf8\x5a\xe0\x09\x0d\xc3\x44\x24\xa4\x21\x04\xd2\x90\xee\x72\x48\x9f\x37\x1b\x78\xcc\xd6\xdb\x45\xb6\x87\x07\xb9\x9f\x89\xc4\xb3\xe2\xe0\x81\xf1\x8d\xbf\x91\x99\x48\x3a\x67\x4f\xa4\xd1\x45\x05\x19\x46\x67\x54\x53\x90\x8e\xba\xca\xa1\x62\xd4\x85\x62\x60\x6a\xd1\xb3\x6a\x3b\xfe\x18\x12\xa1\xd3\x37\x08\xf2\x45\x8b\xae\x46\x55\x36\x08\xa5\xb5\x0d\x2a\x33\xec\xbd\x0d\xae\x42\x78\xf1\xd6\x94\xc3\xfc\xfc\x51\x1c\x57\xd6\x1c\xa8\x0e\x4e\x31\x59\x13\xd7\x0e\x3b\xeb\x89\xad\x7b\xef\xf7\x94\x54\x93\xb9\x58\x64\x42\x5b\xa2\x1b\x29\x4a\xe5\x47\xfe\x76\x44\xa5\xaf\x52\x31\x9d\x8b\x2b\x43\x95\x6d\xdb\xdf\xc9\x19\xba\x2c\xbe\xd8\x4c\xde\xc9\x4c\xa6\x2b\xf9\x74\xe1\x7a\x42\x7a\x3a\x13\xc9\x81\x1a\x8c\xc4\x34\x64\x10\x7a\x73\x35\xba\x61\x7e\xe6\x22\x8b\xfd\x93\x69\x34\x15\x5e\xef\x1e\xd9\xd2\x05\x7f\xfc\xa7\xb7\xd6\x3f\x33\xb1\x1f\x91\xa7\xc9\x33\x99\x8a\x8b\x9f\x91\x1b\x77\xf3\x57\xfd\xbb\xed\x76\x9d\xcf\xc5\x67\x00\x00\x00\xff\xff\xcc\xfa\xa2\x3d\xb1\x03\x00\x00")

func _1533636853_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1533636853_initialUpSql,
		"1533636853_initial.up.sql",
	)
}

func _1533636853_initialUpSql() (*asset, error) {
	bytes, err := _1533636853_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1533636853_initial.up.sql", size: 945, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xc1\x8a\xdb\x30\x10\xbd\xfb\x2b\x84\xcf\xfb\x05\xb9\xf6\x58\x08\xa5\x6c\x4f\xa5\x18\xd9\x1e\x7b\xa7\x48\x23\x57\x1a\xa5\x75\x97\xfc\x7b\xb1\xd8\x4d\x6d\xc7\x6a\x4a\x4a\x37\x72\xf0\x25\x08\x0d\x93\x79\xef\x49\x9a\x37\xc9\x73\x26\x44\xfe\x28\x4b\x05\x2e\xdf\x89\xcf\x99\x10\x42\x3c\x87\x4f\x21\xf2\xbd\xd4\x90\xef\x44\x5e\x19\xad\x81\x38\x7f\x78\x0d\xbc\x33\xca\x6b\xfa\x9d\x31\xce\x9a\x64\x62\x7d\x4a\x0a\xfb\x8f\x7d\x17\xf6\xbd\x9f\x47\x3e\x58\xd4\xd2\xf6\xef\xa1\xcf\x77\x82\xad\x87\x49\xf4\x23\x34\x60\x81\xaa\x21\x99\xbc\x52\x93\xe0\xde\xf0\xde\x2b\xb5\x94\xf7\x89\xf0\x9b\x1f\x92\x1a\xa9\x1c\x9c\x22\xc7\x87\x3f\xc3\xb6\x70\x40\xf8\x5e\xc0\x01\x88\x8b\x2b\x39\x84\x8a\x51\x12\xe3\xb2\xaf\x27\x30\xaf\x3c\xf9\xf2\x93\xea\x2f\xb2\x8e\x42\xc7\x88\x1a\xe7\x08\xae\x94\xa3\x41\x05\xcb\x1a\x30\xfc\xe0\xab\x35\x78\x83\x83\x54\x48\x11\xe4\x48\x0c\x2d\xd8\x94\xc1\x9f\x8b\xbb\x16\xd9\x2b\x43\x0d\xd6\xa1\xde\x22\xfe\x12\x5b\xa4\xdb\x32\x78\x59\x7d\xc9\x46\x7c\xce\x1a\x5f\xe7\xdd\xd3\xec\x2d\xde\x7d\xef\x73\x2c\xd9\xbb\x75\xde\xbb\xce\x9a\x03\xd6\xf3\x57\xbd\x16\xf4\x43\x4b\xb2\x24\x55\xd4\x71\x52\x27\x50\x59\x90\x0c\x75\x21\x63\x6d\x0b\x35\x38\x96\xba\xe3\x9f\x49\xd3\x30\x5a\x23\x47\x9e\x40\x02\xad\xeb\x02\xfc\x1a\x1d\x23\x55\x5c\xac\x9c\x47\x30\x91\xd6\x5b\xc9\x68\x68\x99\xc4\x57\x67\xa8\x4c\x99\x43\x29\x5d\xc4\x02\x93\x87\xfe\x04\x32\xd2\x86\x6e\x0f\xfd\xaf\xcc\x7b\x71\x94\xde\xec\x3b\xe1\x2b\xb7\xd9\xf7\x66\xdf\xff\x4e\xc3\x77\xf5\x3d\xd0\x40\x57\x68\xb0\x2d\x84\x7f\x06\x96\x2d\xdc\x18\x05\x92\x52\x26\xe1\x8c\xb7\xb1\x1f\x81\xb7\xb7\x91\x0b\xe0\x83\xfc\x2b\xc5\x7e\x0f\xc3\x93\x85\xce\x38\x64\x63\xfb\x68\x4b\x4d\x7f\x8a\x25\xaf\xcb\x98\xa3\xa5\x8f\x7e\x9b\x5f\xff\x0b\xf4\xe9\xfc\x9a\x0d\xab\xe3\xaf\x00\x00\x00\xff\xff\x01\x5e\x33\x03\x8a\x17\x00\x00")

func lockJsonBytes() ([]byte, error) {
	return bindataRead(
		_lockJson,
		"lock.json",
	)
}

func lockJson() (*asset, error) {
	bytes, err := lockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lock.json", size: 6026, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1533636853_initial.down.sql": _1533636853_initialDownSql,
	"1533636853_initial.up.sql":   _1533636853_initialUpSql,
	"lock.json":                   lockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1533636853_initial.down.sql": &bintree{_1533636853_initialDownSql, map[string]*bintree{}},
	"1533636853_initial.up.sql":   &bintree{_1533636853_initialUpSql, map[string]*bintree{}},
	"lock.json":                   &bintree{lockJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
